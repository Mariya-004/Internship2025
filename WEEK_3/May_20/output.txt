Enter the program to generate code for: to find the factorial of a number
---------- TextMessage (user) ----------
to find the factorial of a number
---------- TextMessage (Coder) ----------
There are several ways to find the factorial of a number. Here are a few options, progressing from a basic iterative approach to a more advanced recursive approach, and including error handling for negative inputs:

**1. Iterative Approach (using a loop):**

```python
def factorial_iterative(n):
    """
    Calculates the factorial of a non-negative integer iteratively.

    Args:
        n: The non-negative integer.

    Returns:
        The factorial of n.  Returns 1 if n is 0.  Raises ValueError if n is negative.
    """
    if n < 0:
        raise ValueError("Input must be a non-negative integer")
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result


# Example usage
try:
    num = 5
    print(f"Factorial of {num} is {factorial_iterative(num)}")  # Output: Factorial of 5 is 120
    num = 0
    print(f"Factorial of {num} is {factorial_iterative(num)}")  # Output: Factorial of 0 is 1
    num = -5
    print(f"Factorial of {num} is {factorial_iterative(num)}")  # Raises ValueError
except ValueError as e:
    print(e)
```

**2. Recursive Approach:**

```python
def factorial_recursive(n):
    """
    Calculates the factorial of a non-negative integer recursively.

    Args:
        n: The non-negative integer.

    Returns:
        The factorial of n.  Returns 1 if n is 0.  Raises ValueError if n is negative.
    """
    if n < 0:
        raise ValueError("Input must be a non-negative integer")
    elif n == 0:
        return 1
    else:
        return n * factorial_recursive(n - 1)


# Example usage
try:
    num = 5
    print(f"Factorial of {num} is {factorial_recursive(num)}")  # Output: Factorial of 5 is 120
    num = 0
    print(f"Factorial of {num} is {factorial_recursive(num)}")  # Output: Factorial of 0 is 1
    num = -5
    print(f"Factorial of {num} is {factorial_recursive(num)}")  # Raises ValueError
except ValueError as e:
    print(e)
```

**Important Considerations:**

* **Error Handling:**  Both examples now include crucial error handling to prevent crashes if the user provides a negative input.
* **Base Case:** The base case (n=0 or n=1) is essential for recursive functions to stop.
* **Efficiency:** For large values of `n`, the iterative approach is generally more efficient than the recursive approach because recursion involves function calls that have overhead.
* **Large Factorials:** Factorials grow very quickly.  For very large values of `n`, you might encounter integer overflow issues.  In those cases, you might need to use arbitrary-precision arithmetic libraries (like `decimal` or `gmpy2`).


Choose the approach that best suits your needs and coding style.  The iterative approach is often preferred for its efficiency, especially for larger values.  But the recursive approach can be elegant for smaller numbers. Remember to always handle potential errors (like negative input) gracefully in your code. Remember to add error handling for potentially large inputs to prevent integer overflow (very large numbers).  For those, consider the `decimal` module or a similar library.

---------- TextMessage (Debugger) ----------
```python
def factorial_iterative(n):
    """
    Calculates the factorial of a non-negative integer iteratively.

    Args:
        n: The non-negative integer.

    Returns:
        The factorial of n.  Returns 1 if n is 0.  Raises ValueError if n is negative.
    """
    if n < 0:
        raise ValueError("Input must be a non-negative integer")
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result


def factorial_recursive(n):
    """
    Calculates the factorial of a non-negative integer recursively.

    Args:
        n: The non-negative integer.

    Returns:
        The factorial of n.  Returns 1 if n is 0.  Raises ValueError if n is negative.
    """
    if n < 0:
        raise ValueError("Input must be a non-negative integer")
    elif n == 0:
        return 1
    else:
        return n * factorial_recursive(n - 1)


# Example usage
try:
    num = 5
    print(f"Factorial of {num} is {factorial_iterative(num)}")
    num = 0
    print(f"Factorial of {num} is {factorial_iterative(num)}")
    num = -5
    print(f"Factorial of {num} is {factorial_iterative(num)}")
    num = 10
    print(f"Factorial of {num} is {factorial_recursive(num)}")
except ValueError as e:
    print(e)
```
```
Factorial of 5 is 120
Factorial of 0 is 1
Input must be a non-negative integer
Factorial of 10 is 3628800
```
Terminate
